(self.webpackChunkmethod_docs=self.webpackChunkmethod_docs||[]).push([[3737],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return u},kt:function(){return d}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),l=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=l(r),d=a,h=m["".concat(i,".").concat(d)]||m[d]||p[d]||o;return r?n.createElement(h,s(s({ref:t},u),{},{components:r})):n.createElement(h,s({ref:t},u))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=m;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:a,s[1]=c;for(var l=2;l<o;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3680:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return c},metadata:function(){return i},toc:function(){return l},default:function(){return p}});var n=r(2122),a=r(9756),o=(r(7294),r(3905)),s=["components"],c={},i={unversionedId:"method-layout/methods/str_replace_assoc()",id:"method-layout/methods/str_replace_assoc()",isDocsHomePage:!1,title:"str_replace_assoc()",description:"public function strreplaceassoc( array $replace, string $subject )",source:"@site/docs/method-layout/methods/str_replace_assoc().md",sourceDirName:"method-layout/methods",slug:"/method-layout/methods/str_replace_assoc()",permalink:"/method-wiki/docs/method-layout/methods/str_replace_assoc()",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"set_opts()",permalink:"/method-wiki/docs/method-layout/methods/set_opts()"},next:{title:"unload_meta()",permalink:"/method-wiki/docs/method-layout/methods/unload_meta()"}},l=[{value:"Arguments",id:"arguments",children:[]},{value:"Return",id:"return",children:[]},{value:"Example",id:"example",children:[]}],u={toc:l};function p(e){var t=e.components,r=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"public function str_replace_assoc( array $replace, string $subject )")),(0,o.kt)("p",null,"This method is used to replace strings found in an associative array. This method was created from Wes Foster's strReplaceAssoc() function (",(0,o.kt)("a",{parentName:"p",href:"https://www.php.net/manual/en/function.str-replace.php#95198"},"source"),")."),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"arguments"},"Arguments"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"$replace"),(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("em",{parentName:"p"},"(array)")," ",(0,o.kt)("em",{parentName:"p"},"(required)")," The associative array containing strings to search for (the array keys) and the strings to replace matches with (the values)  ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"$subject"),(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("em",{parentName:"p"},"(string)")," ",(0,o.kt)("em",{parentName:"p"},"(required)")," The string to process.  "))),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"return"},"Return"),(0,o.kt)("p",null,"This method will return the passed string, but with any array key matches replaced by the associated values."),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"\n$truth = \"I really like muffins.\";\n\n$words = array(\n    'really' => 'somewhat',\n    'like' => 'enjoy',\n    'muffins' => 'cake',\n);\n\n$this->str_replace_assoc( $words, $truth );\n\necho $truth;\n// Result: \"I somewhat enjoy cake.\"\n\n")))}p.isMDXComponent=!0}}]);