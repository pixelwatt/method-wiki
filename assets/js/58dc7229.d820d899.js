(self.webpackChunkmethod_docs=self.webpackChunkmethod_docs||[]).push([[71],{3905:function(e,t,o){"use strict";o.d(t,{Zo:function(){return m},kt:function(){return c}});var n=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},m=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=d(o),c=r,h=u["".concat(s,".").concat(c)]||u[c]||p[c]||a;return o?n.createElement(h,i(i({ref:t},m),{},{components:o})):n.createElement(h,i({ref:t},m))}));function c(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=o.length,i=new Array(a);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var d=2;d<a;d++)i[d]=o[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,o)}u.displayName="MDXCreateElement"},2739:function(e,t,o){"use strict";o.r(t),o.d(t,{frontMatter:function(){return l},metadata:function(){return s},toc:function(){return d},default:function(){return p}});var n=o(2122),r=o(9756),a=(o(7294),o(3905)),i=["components"],l={},s={unversionedId:"method-layout/methods/load_meta()",id:"method-layout/methods/load_meta()",isDocsHomePage:!1,title:"load_meta()",description:"public function load_meta( int $id )",source:"@site/docs/method-layout/methods/load_meta().md",sourceDirName:"method-layout/methods",slug:"/method-layout/methods/load_meta()",permalink:"/method-wiki/docs/method-layout/methods/load_meta()",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"inject_bs_modal()",permalink:"/method-wiki/docs/method-layout/methods/inject_bs_modal()"},next:{title:"odd_or_even()",permalink:"/method-wiki/docs/method-layout/methods/odd_or_even()"}},d=[{value:"Arguments",id:"arguments",children:[]},{value:"Example",id:"example",children:[]}],m={toc:d};function p(e){var t=e.components,o=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"public function load_meta( int $id )")),(0,a.kt)("p",null,"This method loads all post meta for the provided post ID into the $loaded_meta class property. This is useful when looping through posts for a layout component displayed on a single post, and does not require existing post meta values to be requiried. As with meta for the current post (if building a layout for a single post), methods are provided to assist in using loaded post meta. These methods include: get_loaded_meta(), get_serialized_loaded_meta(), get_loaded_headline(), and get_loaded_content()"),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"arguments"},"Arguments"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"$id"),(0,a.kt)("br",{parentName:"li"}),(0,a.kt)("em",{parentName:"li"},"(int)")," ",(0,a.kt)("em",{parentName:"li"},"(required)")," The post ID to retrieve post meta for.  ")),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"In the following example, we'll create a layout component for the build_components() method that displays a grid of employees and some basic information about them..."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"protected function build_components() {\n    if ( true == $this->attr['is_archive'] ) {\n        global $wp_query;\n    }\n    foreach ( $this->attr['components'] as $component ) {\n        switch ( $component ) {\n            case 'employee-grid':\n                // First, we'll pull the post IDs for employees managed via a custom post type\n                $args = array(\n                    'post_type' => 'method_team',\n                    'numberposts' => -1,\n                    'orderby'     => 'menu_order',\n                    'order'       => 'ASC',\n                    'fields' => 'ids'\n                );\n                $items = get_posts( $args );\n                \n                // Next, we'll loop through them, if any exist\n                if ( $items ) {\n                    if ( is_array( $items ) ) {\n                        $this->html .= '\n                            <div id=\"method-employee-grid\">\n                                <div class=\"container\">\n                                    <div class=\"row\">\n                        ';\n                        foreach ( $items as $item ) {\n                            // Load post meta for the current empoloyee post ID into $this->loaded_meta\n                            $this->load_meta( $item );\n                            $this->html .= '\n                                <div class=\"col-12 col-md-4 col-xl-3 grid-item\">\n                                    <h3>' . get_the_title( $item ) . '</h3>\n                                    ' . get_loaded_headline( '_method_employee_title', '<p class=\"employee-meta mb-0\">Title: ', '</p>' ) . '\n                                    ' . get_loaded_headline( '_method_employee_location', '<p class=\"employee-meta mb-0\">Location: ', '</p>' ) . '\n                                    ' . ( get_loaded_meta( '_method_employee_email' ) ? '<a href=\"mailto:' . get_loaded_meta( '_method_employee_email' ) . '\">Send Email</a>' : '' ) . '\n                                </div>\n                            ';\n                            $this->unload_meta(); // Technically not required, but clean.\n                        }\n                        $this->html .= '\n                                    </div>\n                                </div>\n                            </div>\n                        ';\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n    }\n    return;\n}\n")),(0,a.kt)("p",null,"In the example above, we use WordPress' get_posts() function to pull an array of post IDs for the method_team post type. Then, if any post IDs are returned, we set up the opening HTML for a grid. Then, we loop through each post ID, using the load_meta() method to load the post meta for each item. We then use the some of Method's utility methods to interact with the retrieved post meta for each item."))}p.isMDXComponent=!0}}]);