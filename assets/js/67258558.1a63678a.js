(self.webpackChunkmethod_docs=self.webpackChunkmethod_docs||[]).push([[4514],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return p},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(r),m=o,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||i;return r?n.createElement(h,a(a({ref:t},p),{},{components:r})):n.createElement(h,a({ref:t},p))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var u=2;u<i;u++)a[u]=r[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5626:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u},default:function(){return c}});var n=r(2122),o=r(9756),i=(r(7294),r(3905)),a=["components"],l={},s={unversionedId:"method-layout/methods/get_option()",id:"method-layout/methods/get_option()",isDocsHomePage:!1,title:"get_option()",description:"public function get_option( $key )",source:"@site/docs/method-layout/methods/get_option().md",sourceDirName:"method-layout/methods",slug:"/method-layout/methods/get_option()",permalink:"/docs/method-layout/methods/get_option()",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"get_meta()",permalink:"/docs/method-layout/methods/get_meta()"},next:{title:"get_serialized_loaded_meta()",permalink:"/docs/method-layout/methods/get_serialized_loaded_meta()"}},u=[{value:"Arguments",id:"arguments",children:[]},{value:"Return",id:"return",children:[]},{value:"Example",id:"example",children:[]}],p={toc:u};function c(e){var t=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"public function get_option( $key )")),(0,i.kt)("p",null,"This method allows you to quickly retrieve the value for an individual theme option (or theme mod, depending on the value that the set",(0,i.kt)("em",{parentName:"p"},"opts() method is configured to query). This method can be used to retrieve any option, reguardless of whether or not it is an array. If the passed key does not exist or is empty, this method will return _false"),"."),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"arguments"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"$key"),(0,i.kt)("br",{parentName:"li"}),(0,i.kt)("em",{parentName:"li"},"(string)")," ",(0,i.kt)("em",{parentName:"li"},"(required)")," The options key to pull from the $opts property (where all theme options are stored)",(0,i.kt)("br",{parentName:"li"}),"")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"return"},"Return"),(0,i.kt)("p",null,"If the passed array key (option) exists and is not empty, the key's value is returned. If the key does not exist or is empty, this method returns ",(0,i.kt)("em",{parentName:"p"},"false"),".  "),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Take the following code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$this->html .= ( $this->get_option( 'copyright' ) ? '<div class=\"site-copyright\">' . $this->get_option( 'copyright' ) . '</div>' : '' );\n")),(0,i.kt)("p",null,"In the about code, we first use the get_option() method to see if an array key exists and isn't empty. If the key exists and has a value, we then use the method to output the value, wrapped with a div. Otherwise, we do nothing. The above example is somewhat overly simplified, as it does not sanitize or filter the returned value. In similiar cases, you would most likely be better off using the get_headline_from_option() or get_content_from_option() methods, which automatically check to see if a key exists and has a value, and then processes the returned value in different ways."))}c.isMDXComponent=!0}}]);