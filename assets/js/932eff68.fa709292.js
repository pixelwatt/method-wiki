(self.webpackChunkmethod_docs=self.webpackChunkmethod_docs||[]).push([[2636],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return c},kt:function(){return s}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=n.createContext({}),p=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(r),s=o,f=m["".concat(u,".").concat(s)]||m[s]||d[s]||a;return r?n.createElement(f,i(i({ref:t},c),{},{components:r})):n.createElement(f,i({ref:t},c))}));function s(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},25:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return l},metadata:function(){return u},toc:function(){return p},default:function(){return d}});var n=r(2122),o=r(9756),a=(r(7294),r(3905)),i=["components"],l={},u={unversionedId:"method-layout/methods/build_page()",id:"method-layout/methods/build_page()",isDocsHomePage:!1,title:"build_page()",description:"public function build_page( int $pid = '', bool $archive = false )",source:"@site/docs/method-layout/methods/build_page().md",sourceDirName:"method-layout/methods",slug:"/method-layout/methods/build_page()",permalink:"/method-wiki/docs/method-layout/methods/build_page()",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/method-layout/methods/build_page().md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"build_observer()",permalink:"/method-wiki/docs/method-layout/methods/build_observer()"},next:{title:"check_key()",permalink:"/method-wiki/docs/method-layout/methods/check_key()"}},p=[{value:"Arguments",id:"arguments",children:[]},{value:"Examples",id:"examples",children:[]}],c={toc:p};function d(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"public function build_page( int $pid = '', bool $archive = false )")),(0,a.kt)("p",null,"This method is used to build the layout for a given page or detected archive. At least one of the arguments must be provided for any output."),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"arguments"},"Arguments"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"$pid"),(0,a.kt)("br",{parentName:"li"}),(0,a.kt)("em",{parentName:"li"},"(int)")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," The post ID that you would like to build the page layout for. Defaults to ''\n"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"$archive"),(0,a.kt)("br",{parentName:"li"}),(0,a.kt)("em",{parentName:"li"},"(bool)")," ",(0,a.kt)("em",{parentName:"li"},"(optional)")," Whether or not you are building the layout of an archive. If true, the type of archive is automatically detected.",(0,a.kt)("br",{parentName:"li"}),"")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("p",null,"To generate the layout for a page, regardless of template:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"$layout = new MethodThemeLayout;\necho $layout->build_page( $post->ID );\n")))}d.isMDXComponent=!0}}]);