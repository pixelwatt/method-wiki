(self.webpackChunkmethod_docs=self.webpackChunkmethod_docs||[]).push([[5760],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return m},kt:function(){return u}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=a.createContext({}),s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,d=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=s(n),u=o,h=p["".concat(d,".").concat(u)]||p[u]||c[u]||r;return n?a.createElement(h,i(i({ref:t},m),{},{components:n})):a.createElement(h,i({ref:t},m))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=p;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1572:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return d},toc:function(){return s},default:function(){return c}});var a=n(2122),o=n(9756),r=(n(7294),n(3905)),i=["components"],l={},d={unversionedId:"method-layout/methods/get_loaded_headline()",id:"method-layout/methods/get_loaded_headline()",isDocsHomePage:!1,title:"get_loaded_headline()",description:"public function getloadedheadline( string $key, string $before, string $after, string $fallback = '' )",source:"@site/docs/method-layout/methods/get_loaded_headline().md",sourceDirName:"method-layout/methods",slug:"/method-layout/methods/get_loaded_headline()",permalink:"/method-wiki/docs/method-layout/methods/get_loaded_headline()",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/method-layout/methods/get_loaded_headline().md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"get_loaded_content()",permalink:"/method-wiki/docs/method-layout/methods/get_loaded_content()"},next:{title:"get_loaded_meta()",permalink:"/method-wiki/docs/method-layout/methods/get_loaded_meta()"}},s=[{value:"Arguments",id:"arguments",children:[]},{value:"Example",id:"example",children:[]}],m={toc:s};function c(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"public function get_loaded_headline( string $key, string $before, string $after, string $fallback = '' )")),(0,r.kt)("p",null,"This method allows you to build headlines and other types of content from loaded post meta more efficiently than by using the get_loaded_meta() method. Before this method is used, load_meta() must be first called to load a specified post's meta into the $loaded_meta property. Otherwise, this method will not function as expected. Loaded meta key values, if set and not empty, are passed through esc_html() and then the format_tags() class method. The primary purpose of this method is to provide a utility for writing more concise code."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"arguments"},"Arguments"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"$key"),(0,r.kt)("br",{parentName:"li"}),(0,r.kt)("em",{parentName:"li"},"(string)")," ",(0,r.kt)("em",{parentName:"li"},"(required)")," The loaded meta key to check and use if is set and not empty.",(0,r.kt)("br",{parentName:"li"}),""),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"$before"),(0,r.kt)("br",{parentName:"li"}),(0,r.kt)("em",{parentName:"li"},"(string)")," ",(0,r.kt)("em",{parentName:"li"},"(required)")," Markup to include before the processed value of the loaded meta key, if the key is set and not empty, or a fallback value has been provided.",(0,r.kt)("br",{parentName:"li"}),""),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"$after"),(0,r.kt)("br",{parentName:"li"}),(0,r.kt)("em",{parentName:"li"},"(string)")," ",(0,r.kt)("em",{parentName:"li"},"(required)")," Markup to include after the processed value of the loaded meta key, if the key is set and not empty, or a fallback value has been provided.",(0,r.kt)("br",{parentName:"li"}),""),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"$fallback"),(0,r.kt)("br",{parentName:"li"}),(0,r.kt)("em",{parentName:"li"},"(string)")," ",(0,r.kt)("em",{parentName:"li"},"(optional)")," An optional string to fall back to if the loaded meta key isn't set or is empty. If a fallback value is not provided and the key isn't set or is empty, the method will return empty.",(0,r.kt)("br",{parentName:"li"}),"")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"For this example, let's imagine that we have a custom post type called ",(0,r.kt)("inlineCode",{parentName:"p"},"locations"),". For each location a content editor adds, we've used CMB2 to create a text field (stored as post meta with the key ",(0,r.kt)("inlineCode",{parentName:"p"},"_method_location_custom_title"),") that allows content editors to add a custom title for each location. In the example below, we'll build a layout component that loops through each location, checks to see if a custom title has been set, and displays it if available. Otherwise, the post title for the location will be displayed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$args = array(\n    'posts_per_page' => -1,\n    'post_type'   => 'locations',\n    'fields'      => 'ids'\n);\n$items = get_posts( $args );\n$this->html .= '\n    <div id=\"method-location-list\">\n        <div class=\"container-fluid full-width-container\">\n            <div class=\"row justify-content-center\">\n                <div class=\"col-11\">\n';\nforeach ( $items as $item ) {\n    $this->load_meta( $item );\n    $this->html .= '\n        <div class=\"location-row\">\n            ' . get_loaded_headline( '_method_location_custom_title', '<h2>', '</h2>', get_the_title( $item ) ) . '\n            \x3c!-- Additional locatiom details would normally be pull and displayed here. --\x3e\n        </div>\n    ';\n    $this->unload_meta();\n}\n$this->html .= '\n                </div>\n            </div>\n        </div>\n    </div>\n';\n")))}c.isMDXComponent=!0}}]);